{
  "filename": "implementation.md",
  "__html": "<!--\n Copyright (c) 2019, Xiaomi, Inc.  All rights reserved.\n This source code is licensed under the Apache License Version 2.0, which\n can be found in the LICENSE file in the root directory of this source tree.\n-->\n<h1>组件实现</h1>\n<p>现阶段组件实现只支持 java。</p>\n<h2>实现位置</h2>\n<p>建议把实现统一放在路径下：</p>\n<p>thain/thain-component/com.xiaomi.thain.component</p>\n<h2>引入定义</h2>\n<p>上一节讲了如果写一个定义，我们实现的时候，需要把之前的定义引入。</p>\n<p>在类上使用 com.xiaomi.thain.component.annotation.ThainComponent 这个注解。</p>\n<p>如：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@ThainComponent</span>(<span class=\"hljs-string\">\"这里填上一节写好的mail定义\"</span>)\n</code></pre>\n<h2>定义属性</h2>\n<p>把 json 定义中的 property 放在 class 中，都用 String 类型接收。</p>\n<p>如：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * 邮件标题\n */</span>\n<span class=\"hljs-keyword\">private</span> String title;\n\n<span class=\"hljs-comment\">/**\n * 邮件内容，html格式\n */</span>\n<span class=\"hljs-keyword\">private</span> String contentHtml;\n\n<span class=\"hljs-comment\">/**\n * 邮件接收人，多个用逗号隔开\n */</span>\n<span class=\"hljs-keyword\">private</span> String recipient;\n</code></pre>\n<h2>辅助工具</h2>\n<pre><code class=\"language-java\">com.xiaomi.thain.component.tools.ComponentTools\n</code></pre>\n<p>实现一个组件，大部分情况需要用到这个工具。</p>\n<p>可以在组件的属性中增加一行：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">private</span> ComponentTools tools;\n</code></pre>\n<p>即可使用这个工具。</p>\n<p>ComponentTools 提供了一系列方法：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ComponentTools</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * 发送邮件\n     * <span class=\"hljs-doctag\">@param</span> to 收件人\n     * <span class=\"hljs-doctag\">@param</span> subject 主题\n     * <span class=\"hljs-doctag\">@param</span> content 正文\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sendMail</span><span class=\"hljs-params\">(String[] to, String subject, String content)</span> <span class=\"hljs-keyword\">throws</span> IOException, MessagingException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * 保存当前节点产生的数据\n     *\n     * <span class=\"hljs-doctag\">@param</span> key 数据的key\n     * <span class=\"hljs-doctag\">@param</span> value 数据的value\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">putStorage</span><span class=\"hljs-params\">(@NonNull <span class=\"hljs-keyword\">final</span> String key, @NonNull <span class=\"hljs-keyword\">final</span> Object value)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 获取流程已经产生的数据\n     *\n     * <span class=\"hljs-doctag\">@param</span> jobName 节点名称\n     * <span class=\"hljs-doctag\">@param</span> key key\n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; 自动强制转换\n     * <span class=\"hljs-doctag\">@return</span> 返回对应值的Optional\n     */</span>\n    &lt;T&gt; <span class=\"hljs-function\">Optional&lt;T&gt; <span class=\"hljs-title\">getStorageValue</span><span class=\"hljs-params\">(@NonNull <span class=\"hljs-keyword\">final</span> String jobName, @NonNull <span class=\"hljs-keyword\">final</span> String key)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 获取流程已经产生的数据\n     *\n     * <span class=\"hljs-doctag\">@param</span> jobName 节点名称\n     * <span class=\"hljs-doctag\">@param</span> key key\n     * <span class=\"hljs-doctag\">@param</span> defaultValue 默认值\n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; 自动强制转换\n     * <span class=\"hljs-doctag\">@return</span> 返回对应值, 值不存在则返回defaultValue\n     */</span>\n    &lt;T&gt; <span class=\"hljs-function\">T <span class=\"hljs-title\">getStorageValueOrDefault</span><span class=\"hljs-params\">(@NonNull <span class=\"hljs-keyword\">final</span> String jobName, @NonNull <span class=\"hljs-keyword\">final</span> String key, @NonNull <span class=\"hljs-keyword\">final</span> T defaultValue)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 增加debug日志\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addDebugLog</span><span class=\"hljs-params\">(String content)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 增加info日志\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addInfoLog</span><span class=\"hljs-params\">(String content)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 增加warning日志\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addWarnLog</span><span class=\"hljs-params\">(String content)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 增加error日志\n     *\n     * <span class=\"hljs-doctag\">@param</span> content\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addErrorLog</span><span class=\"hljs-params\">(String content)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 发送http get 请求\n     *\n     * <span class=\"hljs-doctag\">@param</span> url url\n     * <span class=\"hljs-doctag\">@param</span> data ?后面的\n     */</span>\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">httpGet</span><span class=\"hljs-params\">(@NonNull String url, @NonNull Map&lt;String, String&gt; data)</span> <span class=\"hljs-keyword\">throws</span> IOException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * 发送 http post 请求\n     *\n     * <span class=\"hljs-doctag\">@param</span> url url\n     * <span class=\"hljs-doctag\">@param</span> headers headers\n     * <span class=\"hljs-doctag\">@param</span> data data\n     */</span>\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">httpPost</span><span class=\"hljs-params\">(@NonNull String url,\n                    @NonNull Map&lt;String, String&gt; headers,\n                    @NonNull Map&lt;String, ?&gt; data)</span> <span class=\"hljs-keyword\">throws</span> IOException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * 获取当前的id\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">getJobExecutionId</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 获取flow当前产生的全部结果\n     */</span>\n    <span class=\"hljs-function\">Map&lt;String, Object&gt; <span class=\"hljs-title\">getStorage</span><span class=\"hljs-params\">()</span></span>;\n}\n</code></pre>\n<h2>实现执行逻辑</h2>\n<p>在组件的 class 中定义一个 run 方法即可。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span>\n</span></code></pre>\n<h2>job 执行状态</h2>\n<p>job 的执行状态取决于 run 方法中是否抛了异常。</p>\n<p>如果抛了就是为失败，没抛就是为成功。</p>\n",
  "link": "/zh-cn/docs/component/customize/implementation.html",
  "meta": {}
}